// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  email    String     @unique
  name     String     @unique
  role     Role       @default(USER)
  Activity Activity[]
  History  History[]
}

model Log {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  date          DateTime  @default(now())
  documentation String
  latitude      Float
  longitude     Float
  ActivityStart Activity? @relation("ActivityStartLog")
  ActivityEnd   Activity? @relation("ActivityEndLog")
}

model Activity {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @map("_userId") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  startLogId String?  @unique @map("_startLogId") @db.ObjectId
  startLog   Log?     @relation(fields: [startLogId], references: [id], name: "ActivityStartLog")
  endLogId   String?  @unique @map("_endLogId") @db.ObjectId
  endLog     Log?     @relation(fields: [endLogId], references: [id], name: "ActivityEndLog")
}

model History {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @map("_userId") @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  date          DateTime @default(now())
  status        Status   @default(WAITING)
  description   String?
  documentation String[]
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACCEPTED
  REJECTED
  WAITING
}
