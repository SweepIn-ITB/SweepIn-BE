// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  email      String       @unique
  name       String       @unique
  role       Role         @default(USER)
  attendance Attendance[]
  report     Report[]
}

model StartLog {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime     @default(now())
  image      String
  latitude   Float
  longitude  Float
  attendance Attendance[]
}

model EndLog {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime     @default(now())
  image      String
  latitude   Float
  longitude  Float
  attendance Attendance[]
}

model Attendance {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @map("_userId") @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  date       DateTime  @default(now())
  startLogId String?   @unique @db.ObjectId
  startLog   StartLog? @relation(fields: [startLogId], references: [id])
  endLogId   String?   @db.ObjectId
  endLog     EndLog?   @relation(fields: [endLogId], references: [id])

  @@unique([startLogId, endLogId])
}

model Report {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @map("_userId") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  date        DateTime @default(now())
  status      Status   @default(WAITING)
  description String?
  images      String[]
}

enum Role {
  USER
  ADMIN
}

enum Status {
  WAITING
  REJECTED
  ACCEPTED
}
